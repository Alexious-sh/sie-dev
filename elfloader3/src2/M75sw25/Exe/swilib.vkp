;ELFpack v2.3UAFIX (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 26.07.2007
;M75v25

;Library 25.12.2007

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070   ; 000: __arm void loopback0();
0004: 0xA0002070   ; 001: __arm void loopback1();
0008: 0xA0002070   ; 002: __arm void loopback2();
000C: 0xA0002070   ; 003: __arm void loopback3();
0010: 0xA0002070   ; 004: __arm void loopback4();
0014: 0xA020EB99   ; 005: DecToHex
0018: 0xA081AA40   ; 006: __arm int GetAkku(int param1,int param2);
001C: 0xA0A84621   ; 007: GetLP
0020: 0xA081B8D4   ; 008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0A992F0   ; 009: SwitchPhoneOff
;
0028: 0xA07CBA3C   ; 00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;002C: 0xA0FD9401   ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
;0030: 0xA0FD9451   ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA07CB990   ; 00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA07CB9C0   ; 00E: fflush
003C: 0xA07CB9F0   ; 00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)
0040: 0xA07CB820   ; 010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
0044: 0xA0FCF201   ; 011: OpenReadCloseFile
0048: 0xA07CB73C   ; 012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA07CB8B8   ; 013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
;
0050: 0xA0203C24   ; 014: __arm void *malloc(unsigned int size)
0054: 0xA0203C8C   ; 015: __arm void mfree(void *)
0058: 0xA0EF1B55   ; 016: __thumb int sprintf(char *buf, char *str, ...)
005C: 0xA0EF343D   ; 017: __thumb char * strcat (char *,const char *)
0060: 0xA0EF345D   ; 018: __thumb char * strchr (const char *,int)
0064: 0xA0EF3480   ; 019: __arm int  strcmp (const char *,const char *)
0068: 0xA0EF351D   ; 01A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA0EF359D   ; 01B: __thumb unsigned int strlen(char *)
0070: 0xA07BCC1D   ; 01C: __thumb void  wsAppendChar (void *WSHDR,int wchar)
0074: 0xA07BCBD1   ; 01D: __thumb int wsInsertChar(WSHDR *ws,int wchar, int pos);
;
0078: 0xA0800EED   ; 01E: __thumb IMGHDR *GetPITaddr(int num);
007C: 0xA02CCDF5   ; 01F: DrawMainScreen
0080: 0xA02CFA3D   ; 020: DrawScreenSaver
0084: 0xA0801033   ; 021: __thumb int GetImgHeight(int picture);
0088: 0xA0801043   ; 022: __thumb int GetImgWidth(int picture);
008C: 0xA02A944D   ; 023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA07F78B5   ; 024: DrawImage2
0094: 0xA02A9427   ; 025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA07F77F5   ; 026: DrawImgBW
009C: 0xA02A8D0D   ; 027: AddIconToIconbar
;
00A0: 0xA081CAF8   ; 028: getEELiteMaxID
00A4: 0xA07CA394   ; 029: getEEFullMaxID
00A8: 0xA081C9B4   ; 02A: __arm int *GetEELiteBlockAddress(short blocknum);
00AC: 0xA081CA9C   ; 02B: getEELiteBlockSizeVersion
00B0: 0xA07C9FD8   ; 02C: getEEFullBlockSizeVersion
00B4: 0xA081CB2C   ; 02D: StartWriteEELiteBlock
00B8: 0xA081CBA8   ; 02E: FinishWriteEELiteBlock
00BC: 0xA081CB04   ; 02F: DeleteEELiteBlock
00C0: 0xA081CB64   ; 030: WriteEELiteBlock
00C4: 0xA0EF36E5   ; 031: strrchr
;
00C8: 0xA02FC5BC   ; 032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02F1EB4   ; 033: PlaySound2
00D0: 0xA02B4AD8   ; 034: PlaySoundLoop
00D4: 0xA058A863   ; 035: AlarmClockRing
00D8: 0xA04F2E01   ; 036: GetATCmdString
00DC: 0xA0594BD3   ; 037: OriginalATCGSN
00E0: 0xA04F279D   ; 038: PostAtCommand
00E4: 0xA04F3EEF   ; 039: SendATAnswerStr
00E8: 0xA08FCC6D   ; 03A: mfree_high
00EC: 0xA0EF2831   ; 03B: MemChr
;
00F0: 0xA07CBABC   ; 03C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber);
00F4: 0xA050E897   ; 03D: editOrNewTXTModule
00F8: 0xA04EEFAD   ; 03E: LoadProcesses
00FC: 0xA07F851D   ; 03F: GetPaletteAdrByColorIndex
0100: 0xA032698B   ; 040: GetVibraStatus
0104: 0xA08366BB   ; 041: GetProvider
0108: 0xA02D0159   ; 042: IsScreenSaver
010C: 0xA0800077   ; 043: __arm int IsUnlocked(void)
0110: 0xA085AEE9   ; 044: TempLigntOn
0114: 0xA0351904   ; 045: GetWavLen
;
0118: 0xA02CF64D   ; 046: HasNewSMS
011C: 0xA02CE789   ; 047: HasFlashSMS
0120: 0xA02CB167   ; 048: ReadNewSMS
0124: 0xA051097B   ; 049: ReadFlashSMS
0128: 0xA02F49B8   ; 04A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167);
012C: 0xA088E318   ; 04B: StartMidlet
0130: 0xA0558375   ; 04C: __thumb GetMissedCallsCount
0134: 0xA020AF00   ; 04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())

0138: 0xA07C2C87   ; 04E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA07C2CE5   ; 04F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));
0140: 0xA07C2CEF   ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));

0144: 0xA0B417B1   ; 051: GetNetAccessMode
0148: 0xA081BF80   ; 052: char *GetIlluminationDataTable()
014C: 0xA0EF2855   ; 053: memcmp
0150: 0xA020EBD5   ; 054: StrToInt
0154: 0xA03269A1   ; 055: SwitchVibraOnOff
0158: 0xA0FCF421   ; 056: PlayVibra
015C: 0xA020B00C   ; 057: IsCallAfterTimerStillRunning
0160: 0xA0219F1C   ; 058: ClearMemory
0164: 0xA0EF2D20   ; 059: memcpy
;
0168: 0xA07FF8F3   ; 05A: KeypressOn
016C: 0xA07FFA21   ; 05B: KeypressOff
0170: 0xA08ED29C   ; 05C: __arm unsigned char GetCPUClock()
0174: 0xA03B548F   ; 05D: __thumb unsigned char GetCPULoad()
0178: 0xA03B545D   ; 05E: GetMMIMemUsed
017C: 0xA0203C98   ; 05F: __arm int GetFreeRamAvail()
0180: 0xA0326BAB   ; 060: ShowMainMenu
0184: 0xA032B0D3   ; 061: ShowNativeMenu
;0188: 0x   ; 062: SetVibraStatus
018C: 0xA02C93EF   ; 063: MS_Wallpaper_Flush
;
0190: 0xA07C36F1   ; 064: TriggerUpdate 
0194: 0xA0834129   ; 065: EndCall
0198: 0xA07CCAB7   ; 066: EndCallBusy
019C: 0xA02A8759   ; 067: IsDirectCallActive
01A0: 0xA02A5E67   ; 068: GetScreenSaverRAM
01A4: 0xA020C108   ; 069: LockSched
01A8: 0xA020C190   ; 06A: UnlockSched
01AC: 0xA07CB774   ; 06B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA07CB7B0   ; 06C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B4: 0xA07CB6FC   ; 06D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
;
01B8: 0xA0AAF427   ; 06E: IsCalling
01BC: 0xA02C9C97   ; 06F: __arm void RefreshGPRSTraffic()
01C0: 0xA02C9CB5   ; 070: __arm int *GetGPRSTrafficPointer()
01C4: 0xA07F624B   ; 071: DrawRoundRect
01C8: 0xA055452F   ; 072: SetCurrentSecondOfCall
01CC: 0xA0AAFC3F   ; 073: GetTypeOfCall
01D0: 0xA0327167   ; 074: __thumb void* GetFunctionPointer(char * _shortcut);
01D4: 0xA07FD189   ; 075: StoreXYWHtoRECT
01D8: 0xA089BB0D   ; 076: SetWindowText
01DC: 0xA08992EB   ; 077: set2color_byPaletteAdr
;
01E0: 0xA07D9B79   ; 078: GetTimeFormat
01E4: 0xA07FC4DF   ; 079: DrawObject
01E8: 0xA0899381   ; 07A: ClearWindowBuffer
01EC: 0xA02BFAF5   ; 07B: GetProfileFilter
01F0: 0xA0A88828   ; 07C: __arm unsigned int SetVibration(unsigned int power)
01F4: 0xA0AAEE41   ; 07D: IsIncognitoCall
01F8: 0xA0AEA801   ; 07E: Rand
;01FC: 0x   ; 07F: IsPlayerOn
0200: 0xA058B0C1   ; 080: __thumb void int ShowCallList(int list, int zero)
0204: 0xA0EF2FB0   ; 081: HexToDec
;
;0208: 0x   ; 082: GetCurrentTrackFilename
020C: 0xA02DD148   ; 083: GetPathOfFoundFile
0210: 0xA07CB8F0   ; 084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208A05   ; 085: StrCmpNoCase
0218: 0xA07C9F00 ; 086: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg); //cepid=msg=0
021C: 0xA07CA044 ; 087: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg);
;0220: 0x   ; 088: GetAccessoryType
;0224: 0x   ; 089: GetLangMesIntoWS
0228: 0xA07CB68C   ; 08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA07CBC50   ; 08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
;
0230: 0xA02A1014 ; 08Ñ: __thumb void RegExplorerExt(REGEXPLEXT *);
;0234: 0x   ; 08D: GetProfileName
0238: 0xA07CB850   ; 08E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber);
023C: 0xA07CB888   ; 08F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber);
0240: 0xA07CBB2C   ; 090: __arm int truncate (int FileHandler, int length, int *errornumber);
0244: 0xA07CB7F0   ; 091: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber);
0248: 0xA07EF928   ; 092: __arm int * calloc(size_t nelem, size_t elsize);
024C: 0xA0A992FC   ; 093: RebootPhone
0250: 0xA02A10D8   ; 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;0254: 0x   ; 095: __arm int UnRegExplorerExt(REGEXPLEXT const *);
;
;0258: 0x   ; 096:
;025C: 0x   ; 097:
;0260: 0x   ; 098:
0264: 0xA02F4C48   ; 099: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0);
0268: 0xA08261E4   ; 09A: __arm int ChangeVolume(unsigned char Volume);
026C: 0xA8763A64   ; 09B: Audio params addr
;0270: 0x   ; 09C:
0274: 0xA097D589   ; 09D: __thumb int GetMissedEventsPtr()
;0278: 0x   ; 09E:
027C: 0xA07F6117  ; 09F: DrawRect
;
0280: 0xA07BC17F   ; 0A0: wsprintf
0284: 0xA0208AE5   ; 0A1: wstrcpy
0288: 0xA07BC70F   ; 0A2: Unicode_GetCharByPosition
028C: 0xA07CAEDC   ; 0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07BC98F   ; 0A4: wsAlloc
0294: 0xA07BC9CB   ; 0A5: wsFree
0298: 0xA02C9C5D   ; 0A6: ResetGPRSTraffic
029C: 0xA02C9AA9   ; 0A7: __thumb char IsGPRSEnabled();
02A0: 0xA0AECB35   ; 0A8: char IsGPRSConnected();
;
02A4: 0xA080069B ; 0A9: __thumb void KbdLock();
02E4: 0xA08002FF ; 0B9: __thumb void KbdUnlock();
;
02A8: 0xA080092D   ; 0AA: __thumb char *GetCurrentLocale()
02AC: 0xA0002070   ; 0AB: __arm void loopback171();
02B0: 0xA0FCF1B1   ; 0AC: DrawText
02B4: 0xA0FCF0A1   ; 0AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; 0AE: StrUni2Ansi
02BC: 0xA0FCF051   ; 0AF: Hex2Int
02C0: 0xA0FCF351   ; 0B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ; 0B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; 0B2: GetBuildCanvas
02CC: 0xA0FCF301   ; 0B3: Seconds2iTime
;
02D0: 0xA07D8CFB   ; 0B4: __thumb void GetDateTime(TDate *, TTime *)
02D4: 0xA020845B   ; 0B5: __thumb char GetWeek(TDate*)
02D8: 0xA02BF4B1   ; 0B6: __thumb char GetProfile()
02DC: 0xA02BF35F   ; 0B7: __thumb char SetProfile(char)
02E0: 0xA0EF2E94   ; 0B8: __arm int dwMODdw(int denom,int number);
02E8: 0xA0203C30   ; 0BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA0EF2E7C   ; 0BB: __arm void *memset(void *s, int c, int n);
02F0: 0xA0219FE8   ; 0BC: __arm int divide(int divisor, int dividend);
02F4: 0xA0EF2F6C   ; 0BD: __arm  int DivBy10(int divident);
;
02F8: 0xA0FC0C91   ; 0BE: RunScaner MP v14
02FC: 0xA0FC3001   ; 0BF: SpellTime
0300: 0xA0FC7601   ; 0C0: MiniGPS
0304: 0xA0FC0C51   ; 0C1: RunDispatcher
0308: 0xA0FC12A1   ; 0C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; 0C3: ProcessFiles
0310: 0xA0FC0C01   ; 0C4: GetBuffer
;0314: 0x   ; 0C5: PIT_Manager_Core
;0318: 0x   ; 0C6: __arm char GetAkkuCapacity();
;031C: 0x   ; 0C7: CallLibFunByNumber

;
0320: 0xA850D2C0   ; 80C8: __arm unsigned short *RamCap();
0324: 0xA850D2C2   ; 0C9: RamLS
0328: 0xA851A92C   ; 80CA: __arm RAMNET * RamNet();
032C: 0xA851DDD0   ; 0CB: RamRingtoneStatus
0330: 0xA8411778   ; 0CC: RamMissedCalls
0334: 0xA841176C   ; 0CD: RamMissedSMS
0338: 0xA84D1218   ; 0CE: RamDateTime
033C: 0xA8526584   ; 0CF: RamAlarm
0340: 0xA855943C   ; 0D0: RamAccPoint
0344: 0xA84CB45C   ; 0D1: RamScreensaver
;
0348: 0xA84D1240   ; 0D2: RamAutoTime
034C: 0xA84CB464   ; 0D3: RamStby
0350: 0xA841175C   ; 0D4: RamMissedMes
0354: 0xA84FF84C   ; 0D5: RamIsLocked
0358: 0xA84CFBBC   ; 0D6: RamNetOnline
035C: 0xA853308E   ; 0D7: RamScreenBrightness
0360: 0xA84D0FC5   ; 0D8: RamMenuAnywhere
0364: 0xA85172A8   ; 0D9: RamShutdownMode
0368: 0xA8559890   ; 0DA: RamIsShutdown
036C: 0xA84CB490   ; 0DB: RamMainscreenAccuIcon
;
0370: 0xA85BF1A8   ; 0DC: RamRandSeed
0374: 0xA899F2BC   ; 0DD: RamCurrentTrack
;0378: 0x   ; 0DE: RamIsSimPresent
037C: 0xA84FF75C   ; 0DF: RamPressedKey
0380: 0xA84E8C04   ; 80E0: __arm void * RamScreenBuffer();
;0384: 0x   ; 0E1: RamMPlayer_CtrlCode
0388: 0xA8501438   ; 0E2: RamKeyBuffer
038C: 0xA851BBB8   ; 0E3: RamProfileNum
0390: 0xA8000350   ; 0E4: FreeRAM
0394: 0x0000130D   ; 0E5: LP_MonthsShort
;
0398: 0x000004EA   ; 0E6: Pic_Big0
039C: 0x00000542   ; 0E7: Pic_Little0
03A0: 0x0000054C   ; 0E8: Pic_Extra
03A4: 0x00000562   ; 0E9: Pic_Profiles
03A8: 0x00000302   ; 0EA: Pic_Vibra
03AC: 0x0000040A   ; 0EB: Pic_Call
03B0: 0x00000577   ; 0EC: Pic_AdvNet
03B4: 0x000011FA   ; 0ED: LP_MonthsLong
03B8: 0x0000042C   ; 0EE: LP_Weekdays
03BC: 0x0000055A   ; 0EF: Pic_Calendar
;
03C0: 0x00000569   ; 0F0: Pic_AccuGraph
03C4: 0xA02CCC05   ; 0F1: BuildCanvas
;03C8: 0x   ; 0F2: lpRAM_PIT
;03CC: 0x   ; 0F3: RAM_PIT_Cap
03D0: 0xA0EF70A4   ; 0F4: size_t strcspn(const char *s1, const char *s2)
;03D4: 0x   ; 0F5:
03D8: 0xA850D858   ; 0F6: RAMIllumination
03DC: 0xA850D8F0   ; 0F7: RAMKeyIllumination
03E0: 0xA0FD0050   ; 0F8: Additional_PIT_address
03E4: 0x00000542   ; 0F9: Additional_PIT_start
;
03E8: 0x000005A6   ; 0FA: Additional_PIT_end
;03EC: 0x   ; 0FB:
03F0: 0xA0FC0A00   ; 0FC: PictureRelocationTable
03F4: 0x0000F000   ; 0FD: PictureRelocationBase
03F8: 0x00001E1E   ; 0FE: NextPictureMagic
03FC: 0xA0FD4000   ; 0FF: AddrLibrary()

0400: 0xA020A770   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020970C   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0209E0C   ; 102: GBS_AcceptMessage(void)
040C: 0xA0209B34   ; 103: GBS_ClearMessage(void)
0410: 0xA0209D04   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA020ABE0   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA84C98BC   ; 8106: CSMROOT *CSM_root();
041C: 0xA07BEC39   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA07BEC4B   ; 108: CSM_RAM * FindCSMbyID (int id);
0424: 0xA07BED0F   ; 109: __thumb void DoIDLE(void);
0428: 0x00000000 ; 10A: __unknown void *GetConfig(unsigned int id); //BoBaPack
042C: 0x00000000 ; 10B: __unknown void *GetMinAdrScan(); //BoBaPack
0430: 0x00000000 ; 10C: __unknown void *GetMaxAdrScan(); //BoBaPack
0434: 0x00000000 ; 10D: __unknown unsigned short *GetCI();
0438: 0x00000000 ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration); //BoBaPack

043C: 0xA02CE241   ; 10F: __thumb void freeUSSD();
0440: 0xA0208AE5   ; 110: __thumb char *wstrcopy(char *dst, char *src);
0444: 0xA02CE27D   ; 111: __thumb char GetTypeUSSD();
0448: 0xA02CE28D   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *);
044C: 0xA0EF356D   ; 113: __thumb char * strpbrk (const char *s1,const char *s2);
0450: 0xA0EF35E9   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
0454: 0xA0EF3619   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n);
0458: 0xA0EF3669   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen);
045C: 0xA0EF36E5   ; 117: __thumb char * strrchr (const char *s,int c);
0460: 0xA0EF36FD   ; 118: __thumb char * strstr (const char *s1,const char *s2);
0464: 0xA0EF3779   ; 119: __thumb int  strtol (const char *nptr,char **endptr,int base);
0468: 0xA0EF37F5   ; 11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);
046C: 0xA0EF1B01   ; 11B: __thumb int snprintf (char *,int n,const char *format,...);
0470: 0xA0EF2855   ; 11C: __thumb int  memcmp (void *m1,void *m2,int n);
0474: 0xA0EF2CD8   ; 11D: __arm void  zeromem (void *dest,int n);
0478: 0xA0EF2D20   ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);
047C: 0xA07BCAAF   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);
0480: 0xA07BCAD1   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
0484: 0xA07BCAF5   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
0488: 0xA07BCB89   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
048C: 0xA07BC3DB   ; 123: __thumb int  wstrlen (WSHDR *wshdr);
0490: 0xA07BC17F   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...);

0494: 0xA07BC98F   ; 125: __thumb WSHDR * AllocWS (int len);
0498: 0xA07BCD83   ; 126: __thumb void  CutWSTR (void *WSHDR,int len);
049C: 0xA07BC927   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
04A0: 0xA07BC947   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len);
04A4: 0xA07BC2C1   ; 129: __thumb void  FreeWS (WSHDR *wshdr);
04A8: 0xA07FC4DF   ; 12A: __thumb void  DrawObject (DRWOBJ *);

;04AC: 0xA0002070   ; 12B: __thumb void  AddKeybMsgHook (void *proc);
;04B0: 0xA0FFF06F   ; 12C: __thumb int  AddKeybMsgHook_end (void *proc);
;04B4: 0xA0FFF09F   ; 12D: __unknown void  RemoveKeybMsgHook (void *proc);
04B8: 0xA07F851D   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);
04BC: 0xA07F8541   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);
04C0: 0xA07F8551   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest);
04C4: 0xA07F856F   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest);
04C8: 0xA0EF2DD8   ; 132: __arm void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA07FD189   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
04D0: 0xA07FD19F   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
04D4: 0xA07C3483   ; 135: __thumb int  IsGuiOnTop (int id);

04D8: 0xA07C35F1   ; 136: __thumb int  CreateGUI_ID (void *gui,int id);
04DC: 0xA07C3613   ; 137: __thumb int  CreateGUI (void *gui);
04E0: 0xA07C3631   ; 138: __thumb int  CreateGUI_30or2 (void *gui);
04E4: 0xA07C36AD   ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);
04E8: 0xA07C36CF   ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);

04EC: 0xA07C36F1   ; 13B: __thumb void  GeneralFuncF1 (int cmd);
04F0: 0xA07C370F   ; 13C: __thumb void  GeneralFuncF0 (int cmd);
04F4: 0xA07C372D   ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);
04F8: 0xA07C374F   ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);

04FC: 0xA07C389B   ; 13F: __thumb void DirectRedrawGUI (void);
0500: 0xA07C38B5   ; 140: __thumb void  DirectRedrawGUI_ID (int id);
0504: 0xA07C3995   ; 141: __thumb void PendedRedrawGUI (void);
0508: 0xA07F5AE9   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
050C: 0xA020AF9C   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA020C674   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr);
0514: 0xA0207048   ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA020C108   ; 146: __arm void LockSched(void);
051C: 0xA020C190   ; 147: __arm void UnlockSched(void);
0520: 0xA07C2C59   ; 148: __thumb int ShowMSG(int flag, int lgp_id);
0524: 0xA089BB0D   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
0528: 0xA0899381   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
052C: 0xA08992EB   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
0530: 0xA089BB5D   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
0534: 0xA07C34A1   ; 14D: __thumb GUI *GetTopGUI(void);
0538: 0xA08036B3   ; 14E: __thumb void *FindItemByID(GUI *gui,int id);
053C: 0xA08036DD   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);
0540: 0xA07F624B   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
0544: 0xA07F77CB   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
0548: 0xA07C2811   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
054C: 0xA02095D0   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA020700C   ; 154: __arm void KillGBSproc(int cepid);

0554: 0xA0E6A8F5   ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA0E69CC9   ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA0E6B72D   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA0E69B9D   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA0E6AA33   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA0E6A319   ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA0E6A6BB   ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA0E6B323   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA0E6B365   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA0E69FB9   ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA0E6A22F   ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);
0580: 0xA0E6AEBB   ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
0584: 0x00000000   ; 161: __thumb png_init_io(png_structp png_ptr, int fp);

0588: 0xA0EF3A24   ; 162: __arm setjmp(jmp_buf jmpbuf);
058C: 0xA07BFEE5   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
0590: 0xA07BF3C1   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
0594: 0xA07BF6CF   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
0598: 0xA07C007D   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
059C: 0xA07FD4A5   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);

05A0: 0xA08A1B9F   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
05A4: 0xA08A1B43   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0xA08A1B4D   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA07CB928   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)05B0: 0xA07CADBC   ; 16C: str_2ws(WSHDR *ws,char *str,unsigned int size)
05B0: 0xA07CADBC   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
05B4: 0xA05FA5FB   ; 16D: __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA055A287   ; 16E: __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA055AA7D   ; 16F: __arm int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA05084E5   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;Handmaded functions
;05C4: ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05Ñ8: ;172 __arm void REDRAW(void);

05CC: 0xA0AD5955 ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA0AD5C27 ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA0AD5AD9 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA0AD5DA1 ; 176: __thumb int closesocket(int socket);
05DC: 0xA0AD5D1D ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA0AD5E4B ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA0AD6127 ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA0B1D855 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA0B1D861 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA85B809C ; 817C: __arm int socklasterr(void);

05F4: 0xA07C3771 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA07C3793 ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA07C37AD ; 17F: __thumb void DisableIDLETMR(void);

0600: 0xA08A1A71 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA08A19D1 ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA08A1A0D ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA08A1A17 ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA07BF707 ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);

0614: 0xA020A308 ;185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA0AD3511 ;186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA0AD3F41 ;187: __thumb int RequestLMANConnect(LMAN_DATA *);

0620: 0x00000084 ; 8188: __adr int ScreenW(void);
0624: 0x000000B0 ; 8189: __adr int ScreenH(void);
0628: 0x00000012 ; 818A: __adr int HeaderH(void);
062C: 0x00000012 ; 818B: __adr int SoftkeyH(void);

0630: 0xA020C520 ;18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0A1D7CC ;18D: __arm int available0(int sock);
0638: 0xA0AED3E1 ;18E: __thumb void GPRS_OnOff(int on, int _1);

063C: 0xA07C62DF ;18F: __thumb int GetCurMenuItem(void *gui);

0640: 0xA020BBD0 ;190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA020BCFC ;191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA020BE7C ;192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA020BED4 ;193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA020BF30 ;194: __arm void MutexUnlock(MUTEX *mtx);

0654: 0xA07C77A1 ;195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA07C3943 ;196: __thumb void RefreshGUI(void);
065C: 0xA07C77F3 ;197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA07C7901 ;198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA07C7773 ;199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA07C70C5 ;19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA08A1A21 ;19B: __thumb void EDIT_SetFocus(void *gui, int item);

;Handmaded function
;0670: ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);

0674: 0xA0822B6C ;19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA0822B34 ;19E: __arm void StartCpuUsageCount(void);

067C: 0xA02583B9 ;19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA02584EF ;1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA025932B ;1A1: __thumb int inflateEnd(z_streamp strm);
0688: 0xA02B9239 ;1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
068C: 0xA0881E34 ;1A3: __arm int GetCurrentGPRSProfile(void);
0690: 0xA0881DD8 ;1A4: __arm int GetDisconnectTime(void);
0694: 0xA02B9263 ;1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA020B00C ;1A6: __arm int IsTimerProc(GBSTMR *);
069C: 0xA07CDCB7 ;1A7: __thumb char *Get_CC_NC();

06A0: 0xA0E6A7B9 ;1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA0E6B7CB ;1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA0E6AE83 ;1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA0E6B8F3 ;1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA0E6A21D ;1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA0E6B90F ;1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
;
06B8: 0xA0E6C665 ;1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA0E6B8C9 ;1AF: __thumb void png_set_strip_16(png_structp png_ptr);
06C0: 0xA0E6C5FB ;1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA0E6B91D ;1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA0E69BFD ;1B2: __thumb int png_check_sig(png_bytep sig, int num);
06CC: 0xA07F8E83 ;1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA07F6117 ;1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000000 ;81B5: __adr int isnewSGold(void);
06D8: 0xA0AD6647 ;1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA0ADB7F9 ;1B7: __thumb unsigned int str2ip(const char *);

;Handmaded function
;6E0: 0x   ;1B8 : __arm void *EXT_TOP(void);
;6E4: 0x   ;1B9 : __arm void *PNG_TOP(void);
;6E8: 0x   ;1BA : __arm void *LIB_TOP(void);
;6EC: 0x   ;1BB : __arm void *DATA_N_SFB(void);

06F0: 0xA0E4F9C3 ;1BC: __thumb void SHA1_Init(SHA_CTX *c);
06F4: 0xA0E4F6A7 ;1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA0E4F8A3 ;1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA0DD33D9 ;1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method);
0700: 0xA0DD3467 ;1C0: __thumb void RSA_free (RSA *r);
0704: 0xA0DD3633 ;1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
;
0708: 0xA0DCFBCB ;1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA07C48FF ;1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA07C4877 ;1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0800D27 ;1C5: __thumb int GetFontYSIZE(int font);
; 
0718: 0xA08A19F9 ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA08A1A03 ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA07C0235 ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA07BF35B ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA07BF34F ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA07BF343 ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA07BF32D ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA07BF315 ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA07BF3FD ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
 
073C: 0xA02A0744 ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid);
0740: 0xA02A08C4 ; 1D0: __arm int GetExtUid_ws(WSHDR * ext);
0744: 0xA08A1B69 ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA08A1B73 ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL
074C: 0xA08A1A49 ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA08A1A53 ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA0831D8C ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
0758: 0xA0E6B901 ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0E6C6C7 ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA08A1A99 ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA08A1AAD ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);

0768: 0xA050DF2F ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA87996F0 ; 1DB: __unknown PDU *IncommingPDU(void);
0770: 0xA07BC671 ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA07BC693 ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA08A1B39 ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA08A1BCF ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui);
0780: 0xA07C88DD ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA07FC5CB ; 1E1: __thumb int GetSymbolWidth(int wchar,int font);
0788: 0xA07C2283 ; 1E2: __thumb int ws_2utf8(WSHDR *from, char *to , int *result_length, int max_len);
078C: 0xA07C216B ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
0790: 0xA07C18AD ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA08A1C5F ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA07C674F ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
079C: 0xA07DE0E0 ; 1E7: __arm char *GetLastJavaApplication();
07A0: 0xA088DA48 ; 1E8: __arm int IsNoJava();
;07A0: 0x ; 1E9:
07A8: 0xA0801527 ; 1EA: __thumb int GetMaxDynIcon(void);
07AC: 0xA84CA7C2 ; 1EB: __arm char *RAM_IMSI();
07B0: 0xA080159B ; 1EC: __thumb void FreeDynIcon(int picture);
07B4: 0xA08015C7 ; 1ED: __thumb int IsDynIconBusy(int picture);
;07B8: 0x ; 1EE:
07BC: 0xA080152B ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap);
07C0: 0xA02DE66D ; 1F0: __thumb filecopy;
07C4: 0xA02E0559 ; 1F1: __thumb filecopy_op_announce;
07C8: 0xA0831A60 ; 1F2: __arm int devmenu_config_IsCheckboxOff;
07CC: 0xA021AC38 ; 1F3: __arm GetSessionAge;
;07CC: 0x ; 1F4:
07D4: 0xA0EF3021 ; 1F5: __thumb int sscanf(const char *, const char *, ...);
07D8: 0xA08015F3 ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);
;07DC: 0x ; 1F7:
;07E0: 0x ; 1F8:
;07E4: 0x ; 1F9:
;07E8: 0x ; 1FA:
07EC: 0xA8517648 ; 1FB: __arm char *RamMediaIsPlaying();
07F0: 0xA07BEE65 ; 1FC: __thumb void CloseCSM(int id);
;07F4: 0x ; 1FD:
;07F8: 0x ; 1FE:
;07FC: 0x ; 1FF:
0800: 0xA0FC7301 ; Run ScreenShooter on function 200: ScreenShoot()
0804: 0xA07F78DB ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
0808: 0xA095181F ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA07F8D33 ; 203: __thumb void SetPixel(int x,int y,char *color);
0810: 0xA0897C27 ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA07F60D5 ; 205: __thumb void SetProp2Square_v1(void);
0818: 0xA0EF2BFD ; 206: __thumb void srand(unsigned int seed);
081C: 0xA089B3BF ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA07FC5F5 ; 208: __thumb int Get_WS_width(WSHDR *ws, int font);
0824: 0xA07BECBB ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA08A1ADF ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA08A1AF3 ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA08A1B07 ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA08A1B1B ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA07BF689 ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA07BF56F ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);
;
0848: 0xA03D9324 ; 212: __arm int CardExplGetCurItem(void *csm);
084C: 0xA0352DBC ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA07BCBB1 ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA07BCC41 ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA07BC1DD ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...);
;
085C: 0xA05D71D9 ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA08AA0A3 ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA08AA35B ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA08A1BE7 ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA08A1BF1 ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA08A1C2D ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0506995 ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
;
0878: 0xA07C3849 ; 21E: __thumb void FocusGUI(int id);
087C: 0xA07C3867 ; 21F: __thumb void UnfocusGUI(void);
;
0884: 0xA08ED27C ; 221: __arm void SetCpuClockLow(2);
0888: 0xA08ED264 ; 222: __arm void SetCpuClockTempHi(2);
;088C: 0x00000000 ; 223: __unknown IsMediaPlayerInBackground
;0890: 0x00000000 ; 224: __unknown CloseMediaPlayer
;
0894: 0xA02F4DB0 ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA02F5230 ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA02F52D0 ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA02F5314 ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
;
08A4: 0xA0EF3A4C ; 229: __arm void longjmp(jmp_buf, int);
;
08A8: 0xA07CF5F3 ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);
;
;8AC:              ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:              ; 22D:  pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8:              ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA84D123C   ; 22F:  TDateTimeSettings *RamDateTimeSettings
08C0: 0xA07D8C8B   ; 230:  int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA84D11E4   ; 231:  TAppointment *RamAppointment
;8C8:              ; 232:  void GBS_DestroyMessage(GBS_MSG *)
;8CC:              ; 233:  void GetAllEmail()

08E0: 0xA07CF59D ; 238: __thumb void SendAutoUSSDack(void);

08E4: 0xA07CA304 ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg); //cepid=msg=0
08E8: 0xA07CA450 ; 23A: __arm int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA00404BC ; 23B: __arm void DisableIconBar(int disable); //disable=1 - iconbar don`t autoredraw

08F0: 0xA0881E00 ; 23C: __arm int SetCurrentGPRSProfile(int profile);

08F4: 0xA0E4C73D ; 23D: __thumb void MD5_Init(MD5_CTX *c);
08F8: 0xA0E4C3AD ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len); //
08FC: 0xA0E4C645 ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c);//
0900: 0xA0E4D0CD ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);
0904: 0xA07D8FA3 ; 241: __thumb void SetDateTime(TDate *, TTime *);

0910: 0xA0E4133D   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0E413ED   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)

#pragma disable old_equal_ff
+0

;locale=Russian_Russia.1251