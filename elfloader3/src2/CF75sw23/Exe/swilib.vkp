;ELFpack v2.3UAFIX (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 26.07.2007
;CF75v23

;Library 19.04.2010

+10E4000
#pragma enable  old_equal_ff
0000: 0xA0002070   ; f000: SWI0
0004: 0xA0002070   ; f001: SWI1
0008: 0xA0002070   ; f002: SWI2
000C: 0xA0002070   ; f003: SWI3
0010: 0xA0002070   ; f004: SWI4
0014: 0xA020EB99   ;   5: __thumb DecToHex
0018: 0xA07D1A74   ;   6: __arm int GetAkku(int param1,int param2)
001C: 0xA0A1CD21   ;   7: __thumb GetLP
0020: 0xA07D2908   ;   8: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA07F21C4   ;   9: __arm void SwitchPhoneOff(void)
0028: 0xA0786538   ;   A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C:              ;   B: EP__arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030:              ;   C: EP__arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA078648C   ;   D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA07864BC   ;   E: __arm fflush
003C: 0xA07864EC   ;   F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA078631C   ;  10: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA0FCF201   ;  11: API __thumb char *OpenReadCloseFile(char *path,void *ram)
0048: 0xA0786238   ;  12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA07863B4   ;  13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0203C24   ;  14: __arm void *malloc(unsigned int size)
0054: 0xA0203C8C   ;  15: __arm void mfree(void *)
0058: 0xA0E592ED   ;  16: __thumb int sprintf(char *buf, char *str, ...)
005C: 0xA0E5ABD5   ;  17: __thumb char * strcat (char *,const char *)
0060: 0xA0E5ABF5   ;  18: __thumb char * strchr (const char *,int)
0064: 0xA0E5AC18   ;  19: __arm int  strcmp (const char *,const char *)
0068: 0xA0E5ACB5   ;  1A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA0E5AD35   ;  1B: __thumb unsigned int strlen(char *)
0070: 0xA0777865   ;  1C: __thumb void  wsAppendChar (void *WSHDR,int wchar)
0074: 0xA0777819   ;  1D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)
0078: 0xA07B8639   ;  1E: __thumb IMGHDR *GetPITaddr(int num)
;07C:              ;  1F: ;__thumb DrawMainScreen

0080: 0xA0C30F4F   ;  20: ;__thumb DrawScreenSaver
0084: 0xA07B877F   ;  21: __thumb int GetImgHeight(int picture)
0088: 0xA07B878F   ;  22: __thumb int GetImgWidth(int picture)
008C: 0xA02A9D3D   ;  23: __thumb void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA07AF001   ;  24: __thumb DrawImage2
0094: 0xA02A9D17   ;  25: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA07AEF41   ;  26: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA02A9699   ;  27: __thumb AddIconToIconbar
00A0: 0xA07D3B2C   ;  28: ;__arm getEELiteMaxID
00A4: 0xA0784F4C   ;  29: ;__arm getEEFullMaxID
00A8: 0xA07D39E8   ;  2A: ;__arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA07D3AD0   ;  2B: ;__arm getEELiteBlockSizeVersion
00B0: 0xA0784B90   ;  2C: ;__arm getEEFullBlockSizeVersion
00B4: 0xA07D3B60   ;  2D: ;__arm StartWriteEELiteBlock
00B8: 0xA07D3BDC   ;  2E: ;__arm FinishWriteEELiteBlock
00BC: 0xA07D3B38   ;  2F: ;__arm DeleteEELiteBlock

00C0: 0xA07D3B98   ;  30: ;__arm WriteEELiteBlock
00C4: 0xA0E5AE7D   ;  31: __thumb char *strrchr_2(const char *s,int c)
00C8: 0xA03044B8   ;  32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02FA1EC   ;  33: __arm PlaySound2
00D0: 0xA02B5288   ;  34: __arm PlaySoundLoop
;0D4:              ;  35: __thumb void AlarmClockRing(void)
00D8: 0xA04D100D   ;  36: ;__thumb GetATCmdString
00DC: 0xA055DB5F   ;  37: ;__thumb OriginalATCGSN
00E0: 0xA04D09A9   ;  38: ;__thumb PostAtCommand
00E4: 0xA04D20DF   ;  39: ;__thumb SendATAnswerStr
00E8: 0xA0569B6D   ;  3A: __thumb mfree_high
00EC: 0xA0E59FC9   ;  3B: __thumb MemChr
00F0: 0xA07865B8   ;  3C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA04E15BF   ;  3D: __thumb void editOrNewTXTModule(char *file)
00F8: 0xA04CD3BD   ;  3E: __thumb LoadProcesses
00FC: 0xA07AFC69   ;  3F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA032EFC7   ;  40: __thumb int GetVibraStatus()
0104: 0xA07F62E7   ;  41: __thumb GetProvider
0108: 0xA02D659D   ;  42: __arm int IsScreenSaver(void)
010C: 0xA07B77C3   ;  43: __arm int IsUnlocked(void)
;110:              ;  44: __thumb void TempLigntOn(void *)
0114: 0xA0352D4C   ;  45: __arm GetWavLen
0118: 0xA0348A81   ;  46: __thumb int HasNewSMS()
011C: 0xA02D4A2D   ;  47: __thumb int HasFlashSMS()
0120: 0xA02D10DF   ;  48: __thumb int ReadNewSMS(void)
0124: 0xA04E3697   ;  49: __thumb int ReadFlashSMS(void)
;128:              ;  4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA083C5B8   ;  4B: __arm void StartMidlet(char *midlet)
0130: 0xA0515D61   ;  4C: __thumb GetMissedCallsCount
0134: 0xA020AF00   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA077D8BF   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA077D8CF   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA077D977   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0AA8361   ;  51: __thumb GetNetAccessMode
0148: 0xA07D2FB4   ;  52: __arm char *GetIlluminationDataTable()
014C: 0xA0E59FED   ;  53: __thumb int memcmp_2(void *m1,void *m2,int n)
0150: 0xA020EBD5   ;  54: __thumb int StrToInt(char *str)
0154: 0xA032EFDD   ;  55: __thumb int SwitchVibraOnOff(void)
0158: 0xA0FCF421   ;  56: API PlayVibra
015C: 0xA020B00C   ;  57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0E5A470   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA0E5A4B8   ;  59: __arm void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA07B703F   ;  5A: __thumb void KeypressOn(int key)
016C: 0xA07B716D   ;  5B: __thumb KeypressOff
0170: 0xA088D0A8   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA03B731F   ;  5D: __thumb unsigned char GetCPULoad()
0178: 0xA03B72ED   ;  5E: __thumb GetMMIMemUsed
017C: 0xA0203C98   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA032F1AB   ;  60: __thumb void ShowMainMenu()
0184: 0xA0339F7F   ;  61: __thumb void ShowNativeMenu()
;188:              ;  62: --__unknown SetVibraStatus
018C: 0xA02CF2EB   ;  63: __thumb MS_Wallpaper_Flush
0190: 0xA077E339   ;  64: __thumb TriggerUpdate
0194: 0xA07F3D55   ;  65: __thumb void EndCall()
0198: 0xA07878E3   ;  66: __thumb void EndCallBusy()
019C: 0xA02A90E5   ;  67: __thumb int IsDirectCallActive()
01A0: 0xA02A5D37   ;  68: __thumb GetScreenSaverRAM
01A4: 0xA020C108   ;  69: __arm void LockSched_2(void)
01A8: 0xA020C190   ;  6A: __arm void UnlockSched_2(void)
01AC: 0xA0786270   ;  6B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA07862AC   ;  6C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA07861F8   ;  6D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0A36BAF   ;  6E: __thumb int IsCalling(void)
01BC: 0xA02CFB93   ;  6F: __thumb void RefreshGPRSTraffic()

01C0: 0xA02CFBB1   ;  70: __thumb int *GetGPRSTrafficPointer()
01C4: 0xA07AD997   ;  71: __thumb DrawRoundRect
01C8: 0xA0511F1B   ;  72: __thumb SetCurrentSecondOfCall
01CC: 0xA0A373C7   ;  73: __thumb int GetTypeOfCall(int type)
01D0: 0xA032F767   ;  74: __thumb void* GetFunctionPointer(char * _shortcut)
01D4: 0xA07B48D5   ;  75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA084A079   ;  76: __thumb SetWindowText
01DC: 0xA0847857   ;  77: __thumb set2color_byPaletteAdr
01E0: 0xA07912C9   ;  78: __thumb GetTimeFormat
01E4: 0xA07B3C2B   ;  79: __thumb void  DrawObject_2(DRWOBJ *)
01E8: 0xA08478ED   ;  7A: __thumb ClearWindowBuffer
;1EC:              ;  7B: __thumb GetProfileFilter
01F0: 0xA07DBC80   ;  7C: __arm unsigned int SetVibration(unsigned int power)
01F4: 0xA0A365C9   ;  7D: __thumb IsIncognitoCall
01F8: 0xA0A59B89   ;  7E: __thumb Rand
01FC: 0x00000000   ;  7F: API IsPlayerOn

0200: 0xA0553769   ;  80: __thumb void int ShowCallList(int list, int zero)
0204: 0xA0E5A748   ;  81: __arm int HexToDec(int hex)
;208:              ;  82: --__unknown GetCurrentTrackFilename
020C: 0xA02E5980   ;  83: __arm GetPathOfFoundFile
0210: 0xA07863EC   ;  84: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208A05   ;  85: __thumb StrCmpNoCase
0218: 0xA0784AB8   ;  86: __arm ReadEEPROMData
021C: 0xA0784BFC   ;  87: __arm WriteEEPROMData
;220:              ;  88: --__unknown GetAccessoryType
;224:              ;  89: --__unknown GetLangMesIntoWS
0228: 0xA0786188   ;  8A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA078674C   ;  8B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA02A0F24   ;  8C: __thumb void RegExplorerExt(REGEXPLEXT *)
;234:              ;  8D: --__unknown GetProfileName
0238: 0xA078634C   ;  8E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA0786384   ;  8F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0786628   ;  90: __arm int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA07862EC   ;  91: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA07A7078   ;  92: __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA07F21D0   ;  93: __arm void RebootPhone()
0250: 0xA02A0FE8   ;  94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: EP __arm int UnRegExplorerExt(REGEXPLEXT const *)
;258:              ;  96: --__unknown GetWavLenByContent
025C: 0x00000000   ;  97: API CreatePath
0260: 0x00000000   ;  98: API void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA02FCE24   ;  99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA07DD710   ;  9A: __arm int ChangeVolume(unsigned char Volume)
026C: 0xA87477D0   ;  9B: RamAudioParamsAddr
;270:              ;  9C: --__unknown CloseScreensaver
0274: 0xA05C8F0D   ;  9D: __thumb int GetMissedEventsPtr()
0278: 0x00000000   ;  9E: API int GetMissedEventCount(unsigned int Event)
027C: 0xA07AD863   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA0776DC7   ;  A0: __thumb int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA0208AE5   ;  A1: __thumb WSHDR * wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA0777357   ;  A2: __thumb int Unicode_GetCharByPosition(char *)
028C: 0xA07859D8   ;  A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07775D7   ;  A4: __thumb WSHDR * AllocWS_2(int len)
0294: 0xA0776F09   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA02CFB59   ;  A6: __thumb void ResetGPRSTraffic()
029C: 0xA02CF9A5   ;  A7: __thumb char IsGPRSEnabled()
02A0: 0xA0A5BEBD   ;  A8: __thumb char IsGPRSConnected()
02A4: 0xA07B7DE7   ;  A9: __thumb void KbdLock()
02A8: 0xA07B8079   ;  AA: __thumb char *GetCurrentLocale()
02AC: 0xA00404BC   ;  AB: __arm void loopback171()
02B0: 0xA0FCF1B1   ;  AC: API DrawText
02B4: 0xA0FCF0A1   ;  AD: API StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE: API StrUni2Ansi
02BC: 0xA0FCF051   ;  AF: API Hex2Int

02C0: 0xA0FCF351   ;  B0: API DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1: API DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2: API GetBuildCanvas
02CC: 0xA0FCF301   ;  B3: API Seconds2iTime
02D0: 0xA079044B   ;  B4: __thumb void GetDateTime(TDate *, TTime *)
02D4: 0xA020845B   ;  B5: __thumb char GetWeek(TDate*)
02D8: 0xA02C366D   ;  B6: __thumb char GetProfile()
02DC: 0xA02C353B   ;  B7: __thumb char SetProfile(char)
02E0: 0xA0E5A62C   ;  B8: __arm int sdiv(int denom,int number)
02E4: 0xA07B7A4B   ;  B9: __thumb void KbdUnlock()
02E8: 0xA0203C30   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA0E5A614   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0219FE8   ;  BC: __arm int udiv(int divisor, int dividend)
02F4: 0xA0E5A704   ;  BD: __arm int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE: MP RunScaner
02FC: 0xA0FC3001   ;  BF: MP SpellTime

0300: 0xA0FC7601   ;  C0: MP MiniGPS
0304: 0xA0FC0C51   ;  C1: MP RunDispatcher
0308: 0xA0FC12A1   ;  C2: MP GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3: MP ProcessFiles
0310: 0xA0FC0C01   ;  C4: MP GetBuffer
0314: 0x00000000   ;  C5: MP PIT_Manager_Core
;318:              ;  C6: --__unknown char GetAkkuCapacity()
031C: 0x00000000   ;  C7: __arm void CallLibFunByNumber(int num)
0320: 0xA84E8878   ;  C8: __arm unsigned short *RamCap()
0324: 0xA84E887A   ;  C9: RamLS
0328: 0xA84F5294   ;  CA: __arm RAMNET * RamNet()
;34C:              ;  D3: RamStby
036C: 0xA84C1C14   ;  DB: RamMainscreenAccuIcon
0378: 0xA84F3085   ;  DE: RamIsSimPresent
037C: 0xA84DADA8   ;  DF: RamPressedKey

0380: 0xA84D0D50   ;  E0: __arm void * RamScreenBuffer()
0384: 0x00000000   ;  E1: ;unsigned int RamMPlayer_CtrlCode()
0388: 0xA84DCA28   ;  E2: RamKeyBuffer
038C: 0xA8500C24   ;  E3: RamProfileNum
0390: 0xA8780000   ;  E4: FreeRAM
0394: 0x000012FC   ;  E5: LP_MonthsShort
0398: 0x000004FF   ;  E6: Pic_Big
039C: 0x0000047A   ;  E7: Pic_Little
03A0: 0x0000050D   ;  E8: Pic_Extra
03A4: 0x00000565   ;  E9: Pic_Profiles
03A8: 0x00000313   ;  EA: Pic_Vibra
03AC: 0x000004B6   ;  EB: Pic_Call
03B0: 0x0000056C   ;  EC: Pic_AdvNet
03B4: 0x000011EA   ;  ED: LP_MonthsLong
03B8: 0x00000427   ;  EE: LP_Weekdays
03BC: 0x0000057D   ;  EF: Pic_Calendar

03C0: 0x00000557   ;  F0: Pic_AccuGraph
;3C4:              ;  F1: __thumb void *BuildCanvas()
03C8: 0x00000000   ;  F2: MP lpRAM_PIT
03CC: 0x00000000   ;  F3: MP RAM_PIT_Cap
03D0: 0x00000585   ;  F4: MP Pic_Lani
03E0: 0xA0FD0050   ;  F8: MP Additional_PIT_address
03E4: 0x00000557   ;  F9: MP Additional_PIT_start
03E8: 0x000005BB   ;  FA: MP Additional_PIT_end
03F0: 0xA0FC0A00   ;  FC: MP PictureRelocationTable
03F4: 0x0000F000   ;  FD: MP PictureRelocationBase
03F8: 0x00001E1E   ;  FE: MP NextPictureMagic
03FC: 0xA0FD4000   ;  FF: __arm unsigned int AddrLibrary()

0400: 0xA020A770   ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020970C   ; 101: __arm int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0209E0C   ; 102: __arm void GBS_AcceptMessage(void)
040C: 0xA0209B34   ; 103: __arm void GBS_ClearMessage(void)
0410: 0xA0209D04   ; 104: __arm void GBS_PendMessage(GBS_MSG *)
0414: 0xA020ABE0   ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA84C0034   ; 106: __arm CSMROOT *CSM_root()
041C: 0xA0779881   ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA0779893   ; 108: __thumb CSM_RAM * FindCSMbyID (int id)
0424: 0xA0779957   ; 109: __thumb void DoIDLE(void)
043C: 0xA02D44E5   ; 10F: __thumb void freeUSSD()

0440: 0xA0208AE5   ; 110: __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA02D4521   ; 111: __thumb char GetTypeUSSD()
0448: 0xA02D4531   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0E5AD05   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA0E5AD81   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA0E5ADB1   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n)
0458: 0xA0E5AE01   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)
045C: 0xA0E5AE7D   ; 117: __thumb char * strrchr (const char *s,int c)
0460: 0xA0E5AE95   ; 118: __thumb char * strstr (const char *s1,const char *s2)
0464: 0xA0E5AF11   ; 119: deleted int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0E5AF8D   ; 11A: deleted int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0E59299   ; 11B: __thumb int snprintf (char *,int n,const char *format,...)
0470: 0xA0E59FED   ; 11C: __thumb int  memcmp(void *m1,void *m2,int n)
0474: 0xA0E5A470   ; 11D: __arm void  zeromem(void *dest,int n)
0478: 0xA0E5A4B8   ; 11E: __arm void * memcpy(void *dest,const void *source,int cnt)
047C: 0xA07776F7   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0777719   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA077773D   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA07777D1   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0777023   ; 123: __thumb int  wstrlen (WSHDR *wshdr)
0490: 0xA0776DC7   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...)
0494: 0xA07775D7   ; 125: __thumb WSHDR * AllocWS(int len)
0498: 0xA07779CB   ; 126: __thumb void  CutWSTR (void *WSHDR,int len)
049C: 0xA077756F   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA077758F   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA0776F09   ; 129: __thumb void  FreeWS (WSHDR *wshdr)
04A8: 0xA07B3C2B   ; 12A: __thumb void  DrawObject (DRWOBJ *)
;4AC:              ; 12B: EP __thumb void  AddKeybMsgHook (void *proc)
;4B0:              ; 12C: EP __thumb int  AddKeybMsgHook_end (void *proc)
;4B4:              ; 12D: EP __unknown void  RemoveKeybMsgHook (void *proc)
04B8: 0xA07AFC69   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA07AFC8D   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest)

04C0: 0xA07AFC9D   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA07AFCBB   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest)
04C8: 0xA0E5A570   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07B48D5   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA07B48EB   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA077E0CB   ; 135: __thumb int  IsGuiOnTop (int id)
04D8: 0xA077E239   ; 136: __thumb int  CreateGUI_ID (void *gui,int id)
04DC: 0xA077E25B   ; 137: __thumb int  CreateGUI (void *gui)
04E0: 0xA077E279   ; 138: __thumb int  CreateGUI_30or2 (void *gui)
04E4: 0xA077E2F5   ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA077E317   ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA077E339   ; 13B: __thumb void  GeneralFuncF1 (int cmd)
04F0: 0xA077E357   ; 13C: __thumb void  GeneralFuncF0 (int cmd)
04F4: 0xA077E375   ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd)
04F8: 0xA077E397   ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd)
04FC: 0xA077E4E3   ; 13F: __thumb void DirectRedrawGUI (void)

0500: 0xA077E4FD   ; 140: __thumb void  DirectRedrawGUI_ID (int id)
0504: 0xA077E5DD   ; 141: __thumb void PendedRedrawGUI (void)
0508: 0xA07AD235   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id)
050C: 0xA020AF9C   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020C674   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr)
0514: 0xA0207048   ; 145: __arm int GBS_GetCurCepid (void)
0518: 0xA020C108   ; 146: __arm void LockSched(void)
051C: 0xA020C190   ; 147: __arm void UnlockSched(void)
0520: 0xA077D8A1   ; 148: __thumb int ShowMSG(int flag, int lgp_id)
0524: 0xA084A079   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA08478ED   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0847857   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA084A0C9   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA077E0E9   ; 14D: __thumb GUI *GetTopGUI(void)
0538: 0xA07BADFF   ; 14E: __thumb void *FindItemByID(GUI *gui,int id)
053C: 0xA07BAE29   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA07AD997   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA07AEF17   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA077D459   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA02095D0   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: __arm void KillGBSproc(int cepid)
0554: 0xA0DD35B5   ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0DD2989   ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0DD43ED   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0DD285D   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0DD36F3   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0DD2FD9   ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0DD337B   ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0DD3FE3   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0DD4025   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0DD2C79   ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0DD2EEF   ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0DD3B7B   ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0x00000000   ; 161: __thumb png_init_io(png_structp png_ptr, int fp)
0588: 0xA0E5B1BC   ; 162: __arm setjmp(jmp_buf jmpbuf)
058C: 0xA077AB2D   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA077A009   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA077A317   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA077ACC5   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA07B4BF1   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA085010B   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA08500AF   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA08500B9   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0786424   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA07858B8   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA05C69E7   ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0517C73   ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0518469   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA04D8371   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: EP __arm void SUBPROC(void *,...)
;5C8:              ; 172: EP __arm void REDRAW(void)
05CC: 0xA0A4519D   ; 173: __thumb int socket(int af,int type,int protocol)
05D0: 0xA0A4546F   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A45321   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A455E9   ; 176: __thumb int closesocket(int socket)
05DC: 0xA0A45565   ; 177: __thumb int shutdown(int socket,int how)
05E0: 0xA0A45693   ; 178: __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A4596F   ; 179: __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A83781   ; 17A: __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A8378D   ; 17B: __thumb unsigned int htonl(unsigned int)
05F0: 0xA859F89C   ; 17C: __arm int socklasterr(void)
05F4: 0xA077E3B9   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA077E3DB   ; 17E: __thumb void RestartIDLETMR(void)
05FC: 0xA077E3F5   ; 17F: __thumb void DisableIDLETMR(void)

0600: 0xA084FFDD   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA084FF3D   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA084FF79   ; 182: __thumb int EDIT_GetFocus(void *gui)
060C: 0xA084FF83   ; 183: __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA077A34F   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA020A308   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0A42D59   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0A43789   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000080   ; 188: __adr int ScreenW(void)
0624: 0x000000A0   ; 189: __adr int ScreenH(void)
0628: 0x00000016   ; 18A: __adr int HeaderH(void)
062C: 0x00000016   ; 18B: __adr int SoftkeyH(void)
0630: 0xA020C520   ; 18C: __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA09B1528   ; 18D: __arm int available0(int sock)
0638: 0xA0A5C769   ; 18E: __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA0780F27   ; 18F: __thumb int GetCurMenuItem(void *gui)

0640: 0xA020BBD0   ; 190: __arm void MutexCreate(MUTEX *mtx)
0644: 0xA020BCFC   ; 191: __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020BE7C   ; 192: __arm void MutexLock(MUTEX *mtx)
064C: 0xA020BED4   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020BF30   ; 194: __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA07823E9   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA077E58B   ; 196: __thumb void RefreshGUI(void)
065C: 0xA078243B   ; 197: __thumb void *AllocMenuItem(void *gui)
0660: 0xA0782549   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA07823BB   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA0781D0D   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA084FF8D   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: EP __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA07D9BA0   ; 19D: __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA07D9B68   ; 19E: __arm void StartCpuUsageCount(void)
067C: 0xA0258279   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA02583AF   ; 1A0: __thumb int inflate(z_streamp strm, int flush)
0684: 0xA02591EB   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA02BD405   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0834150   ; 1A3: __arm int GetCurrentGPRSProfile(void)
0690: 0xA08340F4   ; 1A4: __arm int GetDisconnectTime(void)
0694: 0xA02BD42F   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020B00C   ; 1A6: __arm int IsTimerProc(GBSTMR *)
069C: 0xA0788AE3   ; 1A7: __thumb char *Get_CC_NC()
06A0: 0xA0DD3479   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0DD448B   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0DD3B43   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0DD45B3   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0DD2EDD   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0DD45CF   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0DD5325   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0DD4589   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0DD52BB   ; 1B0: __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0DD45DD   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0DD28BD   ; 1B2: __thumb int png_check_sig(png_bytep sig, int num)
06CC: 0xA07B05CF   ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA07AD863   ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5: __adr int IsNewSgold(void)
06D8: 0xA0A45E8F   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0A4B041   ; 1B7: __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8: EP __adr void *EXT_TOP(void)
;6E4:              ; 1B9: EP __adr void *PNG_TOP(void)
;6E8:              ; 1BA: EP __adr void *LIB_TOP(void)
;6EC:              ; 1BB: EP __adr void *DATA_N_SFB(void)
06F0: 0xA0DB8683   ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0DB8367   ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0DB8563   ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0D3DB35   ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0D3DBC3   ; 1C0: __thumb void RSA_free (RSA *r)
0704: 0xA0D3DD8F   ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0D3A327   ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA077F547   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA077F4BF   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA07B8473   ; 1C5: __thumb int GetFontYSIZE(int font)
0718: 0xA084FF65   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA084FF6F   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA077AE7D   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0779FA3   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0779F97   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0779F8B   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0779F75   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0779F5D   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA077A045   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA02A0654   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA02A07D4   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA08500D5   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA08500DF   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA084FFB5   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA084FFBF   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA07E53D4   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA0DD45C1   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0DD5387   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0850005   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0850019   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA04E0C75   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA877F7D4   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA07772B9   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA07772DB   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA08500A5   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA085013B   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA0B296C1   ; 1E0: void *MenuGetUserPointer(void *gui)
;784:              ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA077CECB   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA077CDB3   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)
;790:              ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
;794:              ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
;798:              ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0795830   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA02DAC90   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
;7A8:              ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA84C0F2A   ; 1EB: char *RAM_IMSI()
;7B0:              ; 1EC: void FreeDynIcon(int picture)
;7B4:              ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
;7BC:              ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA07E50A8   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA021AC38   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA84C12D1   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0E5A7B9   ; 1F5: int sscanf(const char *, const char *, ...)
;7D8:              ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
;7E0:              ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA84F1FA8   ; 1FB: char *RamMediaIsPlaying()
;7F0:              ; 1FC: void CloseCSM(int id)
07F4: 0xA07AD847   ; 1FD: SetProp2Square_v2
;7F8:              ; 1FE: char *RamLighterPower()
;7FC:              ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0FC7301   ; 200: API __thumb void ScreenShoot()
0804: 0xA07AF027   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA08E550F   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA07B047F   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0846193   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA07AD821   ; 205: SetProp2Square_v1
0818: 0xA0E5A395   ; 206: void srand(unsigned int seed)
081C: 0xA084992B   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA03EB781   ; 208: int Get_WS_width(WSHDR *ws, int font)
;824:              ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
;828:              ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
;82C:              ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
;830:              ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
;834:              ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA077A2D1   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA077A1B7   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

;840:              ; 210: int GetCurGuiID(void)
;844:              ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA07777F9   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
;854:              ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0776E25   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA05A3581   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
;860:              ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
;864:              ; 219: void *AllocMLMenuItem(void *data)
;868:              ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
;86C:              ; 21B: void EDIT_RemoveTextInvert(void *gui)
;870:              ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA04D6821   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
;878:              ; 21E: void FocusGUI(int id)
;87C:              ; 21F: void UnfocusGUI(void)

;880:              ; 220: IsSliderClosed
0884: 0xA088D088   ; 221: void SetCpuClockLow
0888: 0xA088D070   ; 222: void SetCpuClockTempHi
;88C:              ; 223: IsMediaPlayerInBackground
;890:              ; 224: CloseMediaPlayer
;894:              ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02FD2FC   ; 226: int PlayMelody_StopPlayback(int handle)
;89C:              ; 227: int PlayMelody_PausePlayback(int handle)
;8A0:              ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0E5B1E4   ; 229: void longjmp(jmp_buf, int)
;8A8:              ; 22A: void FreeGSMTXTpkt(void *pkt)
;8AC:              ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:              ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8:              ; 22E: OpenExplorer(ExplOpenDesc *)
;8BC:              ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA07903DB   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
;8C4:              ; 231: TAppointment *RamAppointment
;8C8:              ; 232: GBS_DestroyMessage(GBS_MSG *)
;8CC:              ; 233: void GetAllEmail()
;8D0:              ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4:              ; 235: int GetLunarYearID(int year)
;8D8:              ; 236: int GetLunarAnimal(int year)
;8DC:              ; 237: char *RamIconBar()
08E0: 0xA078A3C9   ; 238: void SendAutoUSSDack(void)
;8E4:              ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
;8E8:              ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
;8EC:              ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA0DB53FD   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA0DB506D   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0DB5305   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0DB5D8D   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA07906F3   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0DA9FFD   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0DAA0AD   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
;918:              ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
;91C:              ; 247: NetOff()
;920:              ; 248: char *RamFormatTrack()
;924:              ; 249: char *RamFreq()
;928:              ; 24A: char *RamChannel()
092C: 0xA078289F   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
;930:              ; 24C: int GetPeripheryState(int device, int check_state)
0934: 0xA02FD424   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA03678E8   ; 24E: void *GetPlayObjById(int handle)
;93C:              ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)

;940:              ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
;944:              ; 251: char *RamDataSendFName()
;948:              ; 252: char *RamDataReceiveFName()
;94C:              ; 253: char *RamLastCallNum()
;950:              ; 254: int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA0B296BD   ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
;958:              ; 256: isSetupTheme()
;95C:              ; 257: isSendReceiveFile()
0960: 0xA07B8719   ; 258: int CalcBitmapSize(short w,short h, char typy)
;964:              ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber)
0968: 0xA03CC73C   ; 25A: int Obs_DestroyObject(HObj hObj)
;96C:              ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA030F1C8   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
;974:              ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
;978:              ; 25E: int Obs_Start(HObj hObj)
;97C:              ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)

0980: 0xA030FC68   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA030F7D8   ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA03143B4   ; 262: int Obs_GetInfo(HObj hObj, int unk_0or1)
098C: 0xA030F698   ; 263: intObs_SetScaling(HObj hObj, int unk5)
0990: 0xA0316EC4   ; 264: int Obs_TranslateMessageGBS(GBS_MSG *msg, OBSevent *event_handler)
;994:              ; 265: int Obs_Pause(HObj hObj)
;998:              ; 266: int Obs_Resume(HObj hObj)
;99C:              ; 267: int Obs_Stop(HObj hObj)
;9A0:              ; 268: int Obs_Prepare(HObj hObj)
;9A4:              ; 269: int Obs_SetRenderOffset(HObj hObj,short x,short y)
;9A8:              ; 26A: int Obs_SetPosition(HObj hObj,int ms)
;9AC:              ; 26B: int Obs_Mam_SetPurpose(HObj hObj,int ms)
;9B0:              ; 26C: int Obs_Sound_SetVolumeEx(HObj hObj, char vol, char delta)
;9B4:              ; 26D: int Obs_Sound_GetVolume(HObj hObj, char *vol)
0A04: 0xA85013E8   ; 281: char *RamIsRunJava()
;A08:              ; 282: char *RamIsRunCamera()
;A0C:              ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
;A10:              ; 284: int IsGPRS()
;A14:              ; 285: int IsEDGE()
;A18:              ; 286: int GetSMSState()
;A1C:              ; 287: int BT_GetLocVisibility()
0A20: 0xA0B350E7   ; 288: int GetCurrAudioPath()
0A24: 0xA0AA76C5   ; 289: int isDecryption()
;A28:              ; 28A: char *RamIsFileCache()
#pragma disable old_equal_ff
+0

;********************************************************************************



;locale=Russian_Russia.1251