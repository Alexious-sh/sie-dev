;ELFpack v2.3UAFIX (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 26.07.2007
;C72v22

;Library 25.12.2007

+0FD4000
#pragma enable old_equal_ff
0000: 0xA00204BC   ;   0: __arm void loopback0()
0004: 0xA00204BC   ;   1: __arm void loopback1()
0008: 0xA00204BC   ;   2: __arm void loopback2()
000C: 0xA00204BC   ;   3: __arm void loopback3()
0010: 0xA00204BC   ;   4: __arm void loopback4()
0014: 0xA082BF11   ;   5: DecToHex
0018: 0xA1147C14   ;   6: GetAkku
001C: 0xA15676F1   ;   7: GetLP
0020: 0xA1148AA8   ;   8: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1165AB8   ;   9: SwitchPhoneOff
0028: 0xA112FE40   ;   A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;002C: 0xA0FD9401   ;   B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;0030: 0xA0FD9451   ;   C: fwrite(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA112FD94   ;   D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA112FDC4   ;   E: fflush
003C: 0xA112FDF4   ;   F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA112FC24   ;  10: mkdir
0044: 0xA0FCF201   ;  11: OpenReadCloseFile
0048: 0xA112FB40   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA112FCBC   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0820F9C   ;  14: malloc(unsigned int size)
0054: 0xA0821004   ;  15: mfree(void *)
0058: 0xA1622199   ;  16: sprintf(char *buf, const char *str, ...)
005C: 0xA170D801   ;  17: strcat(char *,const char *)
0060: 0xA170D821   ;  18: strchr(const char *,int)
0064: 0xA170D844   ;  19: strcmp(const char *,const char *)
0068: 0xA170D8E1   ;  1A: strcpy(char *dest,const char *source)
006C: 0xA170D961   ;  1B: strlen(char *)
0070: 0xA0C996D5   ;  1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA0C99689   ;  1D: wsInsertChar
0078: 0xA0CC9B85   ;  1E: GetPITaddr
007C: 0xA08DEBA1   ;  1F: DrawMainScreen

0080: 0xA14F0B2B   ;  20: DrawScreenSaver
0084: 0xA0CC9CCB   ;  21: GetImgHeight
0088: 0xA0CC9CDB   ;  22: GetImgWidth
008C: 0xA08C5299   ;  23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0CC0535   ;  24: DrawImage2
0094: 0xA08C5273   ;  25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0CC0475   ;  26: DrawImgBW
009C: 0xA08C4BF5   ;  27: AddIconToIconbar
00A0: 0xA1149CCC   ;  28: getEELiteMaxID
00A4: 0xA112E854   ;  29: getEEFullMaxID
00A8: 0xA1149B88   ;  2A: GetEELiteBlockAddress
00AC: 0xA1149C70   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA112E498   ;  2C: getEEFullBlockSizeVersion
00B4: 0xA1149D00   ;  2D: StartWriteEELiteBlock
00B8: 0xA1149D7C   ;  2E: FinishWriteEELiteBlock
00BC: 0xA1149CD8   ;  2F: DeleteEELiteBlock

00C0: 0xA1149D38   ;  30: WriteEELiteBlock
00C4: 0xA170DAA9   ;  31: StrChrRev
00C8: 0xA097BF14   ;  32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0971DD4   ;  33: PlaySound2
00D0: 0xA095F39C   ;  34: PlaySoundLoop
00D4: 0xA0AC9253   ;  35: AlarmClockRing
00D8: 0xA0B8684D   ;  36: GetATCmdString
00DC: 0xA0BFBCE3   ;  37: OriginalATCGSN
00E0: 0xA0B861E9   ;  38: PostAtCommand
00E4: 0xA0B8791F   ;  39: SendATAnswerStr
00E8: 0xA0BC3CF5   ;  3A: __thumb mfree_high
00EC: 0xA1622E75   ;  3B: MemChr
00F0: 0xA112FEC0   ;  3C: SetFileSize
00F4: 0xA0A7B6EB   ;  3D: editOrNewTXTModule
00F8: 0xA0B84989   ;  3E: LoadProcesses
00FC: 0xA0CC119D   ;  3F: SelectColor

0100: 0xA08F3067   ;  40: GetVibraStatus
0104: 0xA0BC4617   ;  41: GetProvider
0108: 0xA08E1F49   ;  42: IsScreenSaver
010C: 0xA0CC8D0F   ;  43: IsUnlocked(KMZ)
0110: 0xA0BEC819   ;  44: TempLigntOn
0114: 0xA099C5B4   ;  45: GetWavLen
0118: 0xA08E143D   ;  46: __thumb int HasNewSMS()
011C: 0xA08E0535   ;  47: __thumb int HasFlashSMS()
0120: 0xA08DCF13   ;  48: ReadNewSMS
0124: 0xA0A7D79B   ;  49: __thumb int ReadFlashSMS(void)
0128: 0xA097474C   ;  4a: PlayFile
012C: 0xA0CF2B34   ;  4B: StartMidlet
0130: 0xA0BC0929   ;  4C: GetMissedCallsCount
0134: 0xA0828278   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());

0138: 0xA112BF5F ; 04E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA112BFBD ; 04F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));
0140: 0xA112BFC7 ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int)); 

0144: 0xA129FF21   ;  51: GetNetAccessMode
0148: 0xA1149154   ;  52: GetIlluminationDataTable
014C: 0xA1622E99   ;  53: memcmp
0150: 0xA082BF4D   ;  54: StrToInt
0154: 0xA08F307D   ;  55: SwitchVibraOnOff
0158: 0xA0FCF421   ;  56: PlayVibra
015C: 0xA0828384   ;  57: IsCallAfterTimerStillRunning
0160: 0xA162331C   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA1623364   ;  59:  memcpy
0168: 0xA0CC8573   ;  5A:  KeypressOn
016C: 0xA0CC86A1   ;  5B:  KeypressOff
0170: 0xA119E030   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA091AAA7   ;  5D: __thumb unsigned char GetCPULoad()
0178: 0xA091AA75   ;  5E: GetMMIMemUsed
017C: 0xA0821010   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA08F324B   ;  60: ShowMainMenu
0184: 0xA08F7723   ;  61: ShowNativeMenu
;188:              ;  62: SetVibraStatus;
018C: 0xA08DB143   ;  63: MS_Wallpaper_Flush
0190: 0xA0C9EAA9   ;  64: __thumb TriggerUpdate
0194: 0xA0BC2085   ;  65: EndCall
0198: 0xA0B90897   ;  66: EndCallBusy
019C: 0xA08C4645   ;  67: IsDirectCallActive
01A0: 0xA08C1F2F   ;  68: GetScreenSaverRAM
01A4: 0xA0829480   ;  69: LockSched
01A8: 0xA0829508   ;  6A: UnlockSched
01AC: 0xA112FB78   ;  6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA112FBB4   ;  6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA112FB00   ;  6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA1253FCB   ;  6E: IsCalling
01BC: 0xA08DB9EB   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA08DBA09   ;  70: int * GetGPRSTrafficPointer()
01C4: 0xA0CBEECB   ;  71: DrawFrame
01C8: 0xA0BBCAE3   ;  72: SetCurrentSecondOfCall
01CC: 0xA12547E3   ;  73: GetTypeOfCall
01D0: 0xA08F3807   ;  74: GetFunctionPointer
01D4: 0xA08DA6D1   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA08DA71D   ;  76: GetCanvasBufferPicPtr(char CanvasID)
01DC: 0xA0CFDB03   ;  77: set2color_byPaletteAdr
01E0: 0xA0B9E8EF   ;  78: __thumb int GetTimeFormat()
01E4: 0xA0CC5133   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0xA0CC5D9D   ;  7A: UpdateDisplayByLayerPtr(LCD_Layer *)
01EC: 0xA08D1DDD   ;  7B: GetProfileFilter
01F0: 0xA1151E20   ;  7C: SetVibration(unsigned int power)
01F4: 0xA12539E5   ;  7D: IsIncognitoCall
01F8: 0xA127451D   ;  7E: Rand
;1FC:              ;  7F: IsPlayerOn;

0200: 0xA0AC9AB1   ;  80: ShowCallList(int list, int zero)
0204: 0xA16235F4   ;  81: HexToDec
;208:              ;  82: GetCurrentTrackFilename;
020C: 0xA09630BC   ;  83: GetPathOfFoundFile
0210: 0xA112FCF4   ;  84: int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0825D7D   ;  85: StrCmpNoCase
0218: 0xA112E3C0 ; 086: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg); //cepid=msg=0
021C: 0xA112E504 ; 087: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg);
;220:              ;  88: GetAccessoryType;
;224:              ;  89: GetLangMesIntoWS;
0228: 0xA112FA90   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA1130054   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0957024   ;  8C: RegExplorerExt(REGEXPLEXT const *)
;234:              ;  8D: ;
0238: 0xA112FC54   ;  8E: int fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA112FC8C   ;  8F: int rmdir(const char * cDirectory, unsigned int *ErrorNumber)

0240: 0xA112FF30   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA112FBF4   ;  91: int isdir(const char * cDirectory, unsigned int *ErrorNumber)
0248: 0xA0CB85AC   ;  92: __arm void *calloc(size_t nelem, size_t elsize)
024C: 0xA1165AC4   ;  93: RebootPhone
0250: 0xA09570E8   ;  94:  __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254: 0x ; 095: __arm int UnRegExplorerExt(REGEXPLEXT const *);
;258:              ;  96: ;
;25C:              ;  97: ;
;260:              ;  98: ;
0264: 0xA0974880   ;  99: ;__arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA11B1048   ;  9A: ;__arm int ChangeVolume(unsigned char Volume)
026C: 0xA86B7D90   ;  9B: Audio params addr
;270:              ;  9C: ;
0274: 0xA0C51961   ;  9D: __thumb int GetMissedEventsPtr()
;278:              ;  9E: ;
027C: 0xA0CBED97   ;  9F: DrawRect

0280: 0xA0C98C37   ;  A0: wsprintf
0284: 0xA0825E5D   ;  A1: wstrcpy
0288: 0xA0C991C7   ;  A2: Unicode_GetCharByPosition
028C: 0xA112F2E0   ;  A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0C99447   ;  A4: wsAlloc
0294: 0xA0C98D79   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA08DB9B1   ;  A6: void ResetGPRSTraffic();
029C: 0xA08DB7FD   ;  A7: char IsGPRSEnabled();
02A0: 0xA127684D   ;  A8: IsGPRSConnected
02A4: 0xA0CC9333   ;  A9: KbdLock
02A8: 0xA0CC95C5   ;  AA: __thumb char *GetCurrentLocale()
02AC: 0xA00204BC   ;  AB: __arm void loopback171()
02B0: 0xA0FCF1B1   ;  AC:  DrawText
02B4: 0xA0FCF0A1   ;  AD:  StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE:  StrUni2Ansi
02BC: 0xA0FCF051   ;  AF:  Hex2Int

02C0: 0xA0FCF351   ;  B0:  DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1:  DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2:  GetBuildCanvas
02CC: 0xA0FCF301   ;  B3:  Seconds2iTime
02D0: 0xA0B9DA73   ;  B4: GetDateTime(TDate *, TTime *)
02D4: 0xA08257D3   ;  B5: GetWeek(TDate*)
02D8: 0xA08D17A1   ;  B6: GetProfile()
02DC: 0xA08D166F   ;  B7: SetProfile(char)
02E0: 0xA16234D8   ;  B8: dwMODdw
02E4: 0xA0CC8F97   ;  B9: KbdUnlock
02E8: 0xA0820FA8   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA16234C0   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0837360   ;  BC: __arm int divide(int divisor, int dividend)
02F4: 0xA16235B0   ;  BD: __arm int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE:  RunScaner
02FC: 0xA0FC3001   ;  BF:  SpellTime

0300: 0xA0FC7601   ;  C0:  MiniGPS
0304: 0xA0FC0C51   ;  C1:  RunDispatcher
0308: 0xA0FC12A1   ;  C2:  GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3:  ProcessFiles
0310: 0xA0FC0C01   ;  C4:  GetBuffer
;314:              ;  C5:  PIT_Manager_Core;
0318: 0xA1130E70   ;  C6: __arm char GetAkkuCapacity()
;31C:              ;  C7:  CallLibFunByNumber;
0320: 0xA8465EE4   ;  C8:  RamCap
0324: 0xA8465EE6   ;  C9:  RamLS
0328: 0xA84728F4   ;  CA:  RamNet
032C: 0xA84728FA   ;  CB:  RamNetRX
0330: 0xA839744C   ;  cc:  RamMissedCalls
0334: 0xA8397440   ;  cd:  RamMissedSMS
0338: 0xA8446CC0   ;  ce:  RamDateTime
033C: 0xA847DE54   ;  CF:  RamAlarm
0340: 0xA84AC680   ;  d0:  RamAccPoint
0344: 0xA8442A3C   ;  d1:  RamScreensaver
0348: 0xA8446CE8   ;  d2:  RamAutoTime
034C: 0xA8442A3C   ;  D3:  RamStby
0350: 0xA8397430   ;  d4:  RamMissedMes
0354: 0xA8458504   ;  D5:  RamIsLocked
0358: 0xA8445664   ;  d6:  RamNetOnline
035C: 0xA848896A   ;  d7:  RamScreenBrightness
0360: 0xA8446A6D   ;  D8:  RamMenuAnywhere
;364:              ;  D9:  RamShutdownMode;
0368: 0xA84AC6F0   ;  DA:  RamIsShutdown
036C: 0xA8442A70   ;  db:  RamMainscreenAccuIcon
;370:              ;  DC:  RamRandSeed;
;374:              ;  DD:  RamCurrentTrack
0378: 0xA84706F1   ;  DE:  RamIsSimPresent
037C: 0xA8458414   ;  DF:  RamPressedKey

0380: 0xA844FFB4   ;  E0:  RamScreenBuffer
;384:              ;  E1:  ;
0388: 0xA845A094   ;  E2:  RamKeyBuffer
038C: 0xA8473B80   ;  E3:  RamProfileNum
0390: 0xA8000350   ;  E4:  FreeRAM
0394: 0x0000130D   ; E5: LP_MonthsShort
0398: 0x000004BF   ;  E6:  Pic_Big0
039C: 0x0000047E   ;  E7:  Pic_Little0
03A0: 0x000004CD   ;  E8:  Pic_Extra
;3A4:              ;  E9:  Pic_Profiles
03A8: 0x000002DA   ;  EA:  Pic_Vibra
03AC: 0x000003E0   ;  EB:  Pic_Call
;3B0:              ;  EC:  Pic_AdvNet
;3B4:              ;  ED:  LP_MonthsLong
;3B8:              ;  EE:  LP_Weekdays
;3BC:              ;  EF:  Pic_Calendar

;3C0:              ;  F0:  Pic_AccuGraph
03C4: 0xA08DE9B1   ;  F1:  BuildCanvas
;3C8:              ;  F2:  ;
;3CC:              ;  F3:  ;
;3D0:              ;  F4:  ;
03D4: 0xA844FF08   ;  F5:  Ram_LCD_Overlay_Layer
03D8: 0xA8447A1C   ;  F6:  RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7:  ;
03E0: 0xA0FD0050   ;  F8:  Additional_PIT_address
03E4: 0x00000557   ;  F9: MP Additional_PIT_start
03E8: 0x000005BB   ;  FA: MP Additional_PIT_end
;3EC:              ;  FB:  ;
03F0: 0xA0FC0A00   ;  FC:  PictureRelocationTable
03F4: 0x0000F000   ;  FD: MP PictureRelocationBase
03F8: 0x00001E1E   ;  FE:  NextPictureMagic
03FC: 0xA0FD4000   ;  FF: AddrLibrary()

0400: 0xA0827AE8   ; 100:  GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826A84   ; 101:  GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0827184   ; 102:  GBS_AcceptMessage(void)
040C: 0xA0826EAC   ; 103:  GBS_ClearMessage(void)
0410: 0xA082707C   ; 104:  GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F58   ; 105:  CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8440EB8   ; 106:  CSM_root
041C: 0xA0C9B6F1   ; 107:  CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA0C9B703   ; 108:  CSM_RAM * FindCSMbyID (int id)
0424: 0xA0C9B7C7   ; 109:  __thumb void DoIDLE(void)
0428: 0x00000000   ; 10A: void *GetConfig(unsigned int id)
042C: 0x00000000   ; 10B: void *GetMinAdrScan()
0430: 0x00000000   ; 10C: void *GetMaxAdrScan()
0434: 0x00000000   ; 10D: unsigned short *GetCI()
0438: 0x00000000   ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA08DFFED   ; 10F:  __thumb void freeUSSD()

0440: 0xA0825E5D   ; 110:  __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA08E0029   ; 111: GetTypeUSSD()
0448: 0xA08E0039   ; 112:  __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA170D931   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA170D9AD   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA170D9DD   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA170DA2D   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA170DAA9   ; 117: strrchr_2(const char *s,int c)
0460: 0xA170DAC1   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA170DB3D   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA170DBB9   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA1622145   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA1622E99   ; 11C:  __thumb int  memcmp (void *m1,void *m2,int n)
0474: 0xA162331C   ; 11D:  __arm void  zeromem (void *dest,int n)
0478: 0xA1623364   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0C99567   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0C99589   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0C995AD   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0C99641   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0C98E93   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0C98C37   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0C99447   ; 125: __thumb WSHDR * AllocWS (int len)
0498: 0xA0C9983B   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0C993DF   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0C993FF   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0C98D79   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA0CC515F   ; 12A: DrawObject_2(DRWOBJ *)
;04AC: 0xA0002070   ; 12B: AddKeybMsgHook(void *proc)
;04B0: 0xA0FFF06F   ; 12C: AddKeybMsgHook_end(void *proc)
;04B4: 0xA0FFF09F   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA0CC119D   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA0CC11C1   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0CC11D1   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0CC11EF   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA162341C   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0CC5E09   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA0CC5E1F   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0C9E83B   ; 135: IsGuiOnTop(int id)
04D8: 0xA0C9E9A9   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA0C9E9CB   ; 137: CreateGUI(void *gui)
04E0: 0xA0C9E9E9   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA0C9EA65   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0C9EA87   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0C9EAA9   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA0C9EAC7   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA0C9EAE5   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0C9EB07   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0C9EC53   ; 13F: DirectRedrawGUI(void)

0500: 0xA0C9EC6D   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA0C9ED4D   ; 141: PendedRedrawGUI(void)
0508: 0xA0CBE769   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0828314   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA08299EC   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243C0   ; 145: GBS_GetCurCepid(void)
0518: 0xA0829480   ; 146: LockSched_2(void)
051C: 0xA0829508   ; 147: UnlockSched_2(void)
0520: 0xA112BF31   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA0D00325   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0CFDB99   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0CFDB03   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0D00375   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA0C9E859   ; 14D: GetTopGUI(void)
0538: 0xA0CCB5D3   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0CCB5FD   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0CBEECB   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0CC044B   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA112BAE9   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826948   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824384   ; 154: KillGBSproc(int cepid)
0554: 0xA1600861   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA15FFC35   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA1601699   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA15FFB09   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA160099F   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA1600285   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1600627   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA160128F   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA16012D1   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA15FFF25   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA160019B   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA1600E27   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;584:              ; 161: png_init_io(png_structp png_ptr, int fp);
0588: 0xA170DDE8   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0C9C99D   ; 163:  __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_)
0590: 0xA0C9BE79   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0C9C187   ; 165:  __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0C9CB35   ; 166:  __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0CC6125   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA1166127   ; 168:  __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA11660CB   ; 169:  __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA11660D5   ; 16A:  __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA112FD2C   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA112F1C0   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0C4F43B   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0BCDE9B   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0BCE691   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0B8DBB1   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...);
;5C8:              ; 172:  __arm void REDRAW(void);
05CC: 0xA125F671   ; 173:  __thumb int socket(int af,int type,int protocol)
05D0: 0xA125F943   ; 174:  __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA125F7F5   ; 175:  __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA125FABD   ; 176:  __thumb int closesocket(int socket)
05DC: 0xA125FA39   ; 177:  __thumb int shutdown(int socket,int how)
05E0: 0xA125FB67   ; 178:  __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA125FE43   ; 179:  __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA12820D9   ; 17A:  __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA12820E5   ; 17B:  __thumb unsigned int htonl(unsigned int)
05F0: 0xA8512660   ; 17C:  __arm int socklasterr(void)
05F4: 0xA0C9EB29   ; 17D:  __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0C9EB4B   ; 17E:  __thumb void RestartIDLETMR(void)
05FC: 0xA0C9EB65   ; 17F:  __thumb void DisableIDLETMR(void)

0600: 0xA1165FF9   ; 180:  __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA1165F59   ; 181:  __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA1165F95   ; 182:  __thumb int EDIT_GetFocus(void *gui)
060C: 0xA1165F9F   ; 183:  __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA0C9C1BF   ; 184:  __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0827680   ; 185:  __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA125D22D   ; 186:  __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA125DC5D   ; 187:  __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000082   ; 188:  __adr int ScreenW(void);
0624: 0x00000082   ; 189:  __adr int ScreenH(void);
0628: 0x00000012   ; 18A:  __adr int HeaderH(void);
062C: 0x00000012   ; 18B:  __adr int SoftkeyH(void);
0630: 0xA0829898   ; 18C:  __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA0D818F8   ; 18D:  __arm int available0(int sock)
0638: 0xA12770F9   ; 18E:  __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA0CA1697   ; 18F:  __thumb int GetCurMenuItem(void *gui)

0640: 0xA0828F48   ; 190:  __arm void MutexCreate(MUTEX *mtx)
0644: 0xA0829074   ; 191:  __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA08291F4   ; 192:  __arm void MutexLock(MUTEX *mtx)
064C: 0xA082924C   ; 193:  __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA08292A8   ; 194:  __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA0CA2B59   ; 195:  __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0C9ECFB   ; 196:  __thumb void RefreshGUI(void)
065C: 0xA0CA2BAB   ; 197:  __thumb void *AllocMenuItem(void *gui)
0660: 0xA0CA2CB9   ; 198:  __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0CA2B2B   ; 199:  __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA0CA247D   ; 19A:  __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA1165FA9   ; 19B:  __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C:  __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA114FD40   ; 19D:  __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA114FD08   ; 19E:  __arm void StartCpuUsageCount(void);
067C: 0xA08755C9   ; 19F:  __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA08756FF   ; 1A0:  __thumb int inflate(z_streamp strm, int flush)
0684: 0xA087653B   ; 1A1:  __thumb int inflateEnd(z_streamp strm)
0688: 0xA08CB549   ; 1A2:  __swi __arm int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0CEA6CC   ; 1A3:  __swi __arm int GetCurrentGPRSProfile(void)
0690: 0xA0CEA670   ; 1A4:  __arm int GetDisconnectTime(void)
0694: 0xA08CB573   ; 1A5:  __swi __arm void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0828384   ; 1A6:  __swi __arm int IsTimerProc(GBSTMR *)
069C: 0xA0B91A97   ; 1A7: char* Get_NC_CC(); 
06A0: 0xA1600725   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA1601737   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA1600DEF   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA160185F   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA1600189   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA160187B   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA16025D1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA1601835   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA1602567   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA1601889   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA15FFB69   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0CC1B03   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0CBED97   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
06D4: 0x00000000   ; 1B5: __adr int isnewSGold(void);
06D8: 0xA1260363   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA1265515   ; 1B7: __thumb unsigned int str2ip(const char *);
;6E0:              ; 1B8: __swi __arm void *EXT_TOP(void);
;6E4:              ; 1B9: __swi __arm void *PNG_TOP(void);
;6E8:              ; 1BA: __swi __arm void *LIB_TOP(void);
;6EC:              ; 1BB: __swi __arm void *DATA_N_SFB(void);
06F0: 0xA15EA07B   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA15E9D5F   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA15E9F5B   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA15ABF1D   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA15ABFAB   ; 1C0: void RSA_free (RSA *r)
0704: 0xA15AC177   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA14B07CF   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0C9FCB7   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA0C9FC2F   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0CC99BF   ; 1C5: __thumb int GetFontYSIZE(int font);
0718: 0xA1165F81   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA1165F8B   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0C9CCED   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0C9BE13   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0C9BE07   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0C9BDFB   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0C9BDE5   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0C9BDCD   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0C9BEB5   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073c: 0xA0956754   ; 1CF: REGEXPLEXT_ARM_NEW *GetEXPLEXTByRegN(int id)
0740: 0xA09568D4   ; 1D0: int GetExtUid_ws(WSHDR * ext);
0744: 0xA11660F1   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA11660FB   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA1165FD1   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA1165FDB   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA115B558   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex); 
0758: 0xA160186D   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA1602633   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA1166021   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA1166035   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA0A7AD83   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA86EF308   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA0C99129   ; 1DC: __arm short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA0C9914B   ; 1DD: __swi __arm short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA11660C1   ; 1DE: __swi __arm int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA1166157   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA112D355   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA0CC524B   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA112B8DF   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA112B7C7   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA0C9E365   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA11661E7   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA0CA1B07   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0CA6D64   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA0CF2268   ; 1E8: __arm int IsNoJava()
;7A4:              ; 1E9: EP __arm IMGHDR *create_imghdr(const char *fname, int type)
07A8: 0xA0CCA1BF   ; 1EA: __thumb int GetMaxDynIcon(void)
07AC: 0xA8441DAE   ; 1EB: __arm char *RAM_IMSI()
07B0: 0xA0CCA233   ; 1EC: __thumb void FreeDynIcon(int picture)
07B4: 0xA0CCA25F   ; 1ED: __thumb int IsDynIconBusy(int picture)
;7B8:              ; 1EE: --__unknown ProgressCalculate(int current, int total)
07BC: 0xA0CCA1C3   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA09645E1   ; 1F0: __thumb filecopy
07C4: 0xA09664CD   ; 1F1: __thumb filecopy_op_announce
07C8: 0xA115B22C   ; 1F2: __arm int devmenu_config_IsCheckboxOff
07CC: 0xA0837FB0   ; 1F3: __arm GetSessionAge
07D0: 0xA8442154   ; 1F4: char *RamServiceProviderName() 
07D4: 0xA1623665   ; 1F5: __thumb int sscanf(const char *, const char *, ...)
07D8: 0xA0CCA28B   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
;7DC:              ; 1F7: long GetFileSize(char *Filename)
;7E0:              ; 1F8: 
;7E4:              ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA846F610   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA0C9B91D   ; 1FC: __thumb void CloseCSM(int id)
07F4: 0xA0CBED7B   ; 1FD: SetProp2Square_v2
;7F8:              ; 1FE: char *RamLighterPower()
;7FC:              ; 1FF: void MEDIA_PLAYLAST()
0800: 0xA0FC7301   ; 200: ScreenShoot
0804: 0xA0CC055B   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0D389D3   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0CC19B3   ; 203: __thumb void SetPixel(int x,int y,char *color)
0810: 0xA0CFC43F   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0CBED55   ; 205: SetProp2Square_v1
0818: 0xA1623241   ; 206: __thumb void srand(unsigned int seed)
081C: 0xA0CFFBD7   ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA0CC5275   ; 208: Get_WS_width(*ws, font)
0824: 0xA0C9B773   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA1166067   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA116607B   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA116608F   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA11660A3   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA0C9C141   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA0C9C027   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);

0848: 0xA09E31A4 ; 212: __arm int CardExplGetCurItem(void *csm);
084C: 0xA099D8CC ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA0C99669 ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA0C996F9 ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA0C98C95 ; 216: __thumb void wstrcatprintf(WSHDR *,const char *format,...);
085C: 0xA0B0B461 ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA1169C9F ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA1169F57 ; 219: __unknown void *AllocMLMenuItem(void *data);

0868: 0xA116616F ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA1166179 ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA11661B5 ; 21C: __unknown int EDIT_IsBusy(void *gui);
0874: 0xA0B8C061 ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));

0878: 0xA0C9EC01 ; 21E: __thumb void FocusGUI(int id);
087C: 0xA0C9EC1F ; 21F: __thumb void UnfocusGUI(void);

0884: 0xA119E010 ; 221: __arm void SetCpuClockLow(2);
0888: 0xA119DFF8 ; 222: __arm void SetCpuClockTempHi(2);
;088C: 0x00000000 ; 223: __unknown IsMediaPlayerInBackground
;0890: 0x00000000 ; 224: __unknown CloseMediaPlayer

0894: 0xA0974980 ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA0974D58 ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA0974DF8 ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA0974E3C ; 228: __arm int PlayMelody_ResumePlayBack(int handle);

08A4: 0xA170DE10 ; 229: __arm void longjmp(jmp_buf, int);

08A8: 0xA0CA3B6F ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);

;8AC:              ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:              ; 22D:  pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8:              ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA8446CE4   ; 22F:  TDateTimeSettings *RamDateTimeSettings
08C0: 0xA0B9DA03   ; 230:  int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8446C8C   ; 231:  TAppointment *RamAppointment
;8C8:              ; 232:  void GBS_DestroyMessage(GBS_MSG *)
;8CC:              ; 233:  void GetAllEmail()

08E0: 0xA0CA3B19 ; 238: __thumb void SendAutoUSSDack(void);
08E4: 0xA112E7C4 ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg); //cepid=msg=0
08E8: 0xA112E910 ; 23A: __arm int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA00204BC ; 23B: __arm void DisableIconBar(int disable); //disable=1 - iconbar don`t autoredraw

08F0: 0xA0CEA698 ; 23C: __arm int SetCurrentGPRSProfile(int profile);

08F4: 0xA15E6DF5 ; 23D: __thumb void MD5_Init(MD5_CTX *c);
08F8: 0xA15E6A65 ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len); //
08FC: 0xA15E6CFD ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c);//
0900: 0xA15E7785 ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);
0904: 0xA0B9DD1B ; 241: __thumb void SetDateTime(TDate *, TTime *);

0910: 0xA15DB9F5   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA15DBAA5   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)

#pragma disable old_equal_ff
+0

;locale=Russian_Russia.1251